/*****************************************************************************
TITLE: Claims																																
AUTHOR: Abhishek Chopra (1801CS03)
Declaration of Authorship
This txt file, claims.txt, is part of the assignment of CS321 at the 
department of Computer Science and Engg, IIT Patna . 
*****************************************************************************/

Files:
==========
*All the files i submitted, asm.c++ and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the test examples has also been uploaded. They are test1(3 output files), test2(3 output files), test3
(3 output file), bubble(3 output files), test4(3 output file), test5(3 output file), test6(3 output file), bubble.txt and test_asm(3 output files), test_asm.txt. 

Note .txt are files generated by trace of emulator.


* Programs are compilable with g++ assembler.cpp -o asm
* Running the program ./asm bubble.asm
* Programs are compilable with g++ emu.cpp -o emu
* Running the emulatior ./ emu bubble.o

Note: Keep "mnemonics.h" file in same directory while compiling the assembler

=============================
Program format and structure:
=============================
1. The assembler:

*	Can handle extra spaces between operands and extra whitespaces except labels where providing space is neccessary after it's declarations. 

*	Assembler can detect the following errors:
	- Bogus mnemonic
	- Incorrect label naming format
	- Repeated label
	- Label not found
	- Label name can not be a keyword
	- Missing operand
	- More operands than expected
	- Invalid operand format
	- Incorret label format 

*	Assembler can issue the following warnings:
	- Unused label
	- Integer overflow w.r.t signed 32- bit

*	Stores mnemonic and their opcodes.
*	Stores defined labels in program.
*	Uses single routine for both pases to assemble the program.
*	Generates an advanced listing file.
*	Generates an object file with .o extension
*	Listing and object files are empty if there are any errors.
*	Can implement the instruction SET.

2. The emulator: 

*	My emulator is both interactive and log based. You can run each instruction line by line or output all the trace directly into file_name.txt

*	Emulator can do following things:
	- Trace current instruction only: -t
	- See all read operations: -r
	- See all write opereration: -w
	- See the code segment: -before
	- Trace all instructions at once and save trace to file_name.txt: -all
	- See next instruction to be executed: -next
	- See memory dump: -dump
	- To view instructions: -help
	- Print no. of instructions executed
	- Detect some types of segmentation faults

*	Unique Feature:
	- Tells next instruction to be executed that can help in debugging.
	- Is interactive
	- Is very flexible with input and error handling
	- For e.g. if given wrong input during addressing dump it asks again for the correct format
	- Convenient dumping format asks for base and offset so doesn't overflows the screen.

*	Can do other normal things in instruction as well.	
*	Loads Object file
*	Produces memory dump
*	execute test program
*	Detects errant programs


3. Bubble sort: 

*	Assemble
*	Works

=============================
Testing:
=============================

1. The assembler:

I have tested five examples shown as below. The errors only occurred in the file test2.asm and test5.asm.

The others were tested without any errors ( but warnings can be there ) detected and produced three output files: listing file, 
error log file and machine readable object file, for each example. 
 

1). Input: test_emu.asm
  . Output: test_emu.o, test_emu.l, test_emu.log, test_emu.txt (Emulated trace).

2). Input: bubble.asm
  . Output: bubble.o, bubble.l, bubble.log, bubble.txt (Emulated trace).
  
Note: For emulated trace do -all.

Thank you!.




